<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 计算机技术 | 人間夜行]]></title>
  <link href="https://elephantus.moe/blog/categories/ji-suan-ji-ji-zhu/atom.xml" rel="self"/>
  <link href="https://elephantus.moe/"/>
  <updated>2017-06-26T21:42:56+08:00</updated>
  <id>https://elephantus.moe/</id>
  <author>
    <name><![CDATA[人間夜行]]></name>
    <email><![CDATA[ich@elephantus.moe]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[导出 Goldendict 记录至 Anki Deck]]></title>
    <link href="https://elephantus.moe/blog/export-goldendict-history-into-anki-deck/"/>
    <updated>2017-06-26T21:15:08+08:00</updated>
    <id>https://elephantus.moe/blog/export-goldendict-history-into-anki-deck</id>
    <content type="html"><![CDATA[<p>自从开始使用 Anki，往里面添加词汇数据就变成了一件辛苦的工作。英语日语学习者可能已经有了比较好的自动化工具可以使用，而其他一些语言则相对匮乏。另一方面，Goldendict 是比较好用的桌面词典程序，是我的日常主力，内置了非常朴实的历史查询记录的功能，最新的版本还有手动收藏生词的功能，不过大同小异，选择普通的文本导出即可。文件格式很简单，一行一个词，处理难度很小。因此，我考虑从这里入手。<!--more--></p>

<p>我之前也参考了 <a href="https://www.reddit.com/r/Anki/comments/34imaw/export_from_goldendict_to_anki_deck_working_method/">这篇文章</a> 提供的思路，但是 XDXF 格式的词典所用的转换工具似乎已经无人维护，编译失败，我不得不考虑自己重新写一个工具。</p>

<p>我先利用支持多种格式转换的 <a href="https://github.com/ilius/pyglossary">PyGlossary</a> 将词典转换为 SQL，再用其他工具转换为 SQLite3 格式。（不直接转是因为似乎有 BUG，不能成功。）然后利用以下 Python3 脚本得到可以导入 Anki 的 CSV 文件。代码中文件名仅作为示例，你应该根据自己的情况替换。</p>

<pre><code class="python">#!/usr/bin/env python3
import sqlite3
import csv

conn = sqlite3.connect('Langenscheidt e-Großwörterbuch Deutsch als Fremdsprache.sqlite3')
c = conn.cursor()

with open('favlist.txt') as inf:
    words = inf.read().split('\n')
words[0] = words[0].replace('\ufeff', '')

print('If error occurs, check if the broken entry can be found in dictionary.')
with open('favlist.csv', 'w') as outf:
    listwriter = csv.writer(outf)
    for wd in words:
        print('Adding: ' + wd)
        c.execute('SELECT m FROM word WHERE w=?', (wd,))
        result = c.fetchone()
        listwriter.writerow([wd, result[0]])

conn.close()
print('Done')
</code></pre>

<p>编写过程中被那个 BOM 阻碍，很久查不出错误，非常感谢微软。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[普通 Linux 用户的方法论]]></title>
    <link href="https://elephantus.moe/blog/methodology-of-an-ordinary-linux-user/"/>
    <updated>2017-01-06T20:27:25+08:00</updated>
    <id>https://elephantus.moe/blog/methodology-of-an-ordinary-linux-user</id>
    <content type="html"><![CDATA[<p>我只简单谈一谈普通用户的方法论吧。</p>

<p>（以下 Linux 主要是指发行版，不是专指内核）</p>

<p>从 2009 年开始算 Linux 的坑我已经入了八年，这八年来最大的变化就是心态。有些看起来是老生常谈，经过考察证实了确实是人生的经验。但是同时我们也要考虑到历史的进程，发现所谓经验中具有普遍价值的真理，将其从时常变化的意见中分离出来。这应该就是我在与 Linux 相伴的八年里学会的东西。<!--more--></p>

<p>说得这么玄乎究竟是什么意思？我觉得还是应该先谈一下我对待计算机及其相关技术的原则。</p>

<p>计算机其实在大多数情况下只是工具，不是玩具。固然可以把它当作玩具，但这终究不是人生的常态。我其实只是一个普通用户，我会写一些小程序，但我不是程序员，有时玩玩游戏，至于我的专业则与计算机毫无关联。因此，我对计算机的要求其实很简单，不过是要它总能按照我的意思工作而已（我坦言我很懒，能自动化处理的事情总想交给计算机，毕竟计算机是适合处理这类事情的）。但是就算是这样一种看起来很简单的要求，实现起来确实是有点困难。操作系统发展到今天，已经变得非常用户友好，但这种友好并不总是足够的，正如一切不完美的人工事物，很多时候还是会出现各种问题。这种时候，为了用户友好而被隐藏起来的技术细节就显得尤为重要，考察技术细节的能力似乎成为了判断用户水平的依据。我不认为这个问题短期内能够解决，但至少在这个时代，多一些这方面能力总归是能便利自己的，而且多少可以在这个特殊的信息技术时代对我们生存的世界掌握一些主动权，这基本上也就是普通用户学习技术的目标界限。这是好的。</p>

<p>言归正传。事实上我已经很难再想起 2009 年尝试 Ubuntu 的确切原因了，可以确定的是我当时对 Windows XP 已经十分厌倦了。容易中毒，处处得小心谨慎，为了一件小事下一大堆软件，而且我家机器也有点旧了，拖着 XP 又卡又慢，当然更重要的是当时我喜欢自己改系统，好奇心强，于是一听说我们其实也有其他选择时，Linux 自然吸引了我。而其中 Ubuntu 是最有名的，新手最多尝试的，用户群体相对大的，支持相对好的。关于 Linux 普遍意义上的优点，我只提它的开放性和可控制性。这个系统的每一个部分都毫无秘密可言，所有的“秘笈”都是公开的信息，每个部件都是相对独立的，每个软件的开发者都是大活人（与冷冰冰的大公司相对），这当然和它社区的程序员文化有关。有时如果想自己动手写点什么解决非常独特的问题，Linux 下是有正常方便的门路可走的，各种文档都可以去看。结果就是每个用户都被允许拥有一个最适合自己使用的系统（总觉得这句话宗教性很强，简直像传福音）。总之在使用上，弄明白想做什么和怎么去做之后，基本上就是直来直往的坦途。这多少有点共产主义的味道，我们没有被奴役，并且与生产工具的关系是和谐的。不过自己必须对自己负责也正是自由的代价了。</p>

<p>后来换掉了 Ubuntu 原因也正是它与我的观念背道而驰。经常折腾 Linux 的朋友一定懂得，每次配置新系统总是希望这是最后一次了。但是很多时候还是无法避免不停地重装。这很烦。有这个精力还不如干点别的。由于 Ubuntu 众所周知的跨版本升级问题我的机器挂了，并且此前为了我的“方便”以我难以理解的方式预先配置好的东西总给我制造麻烦，是时候换成 Archlinux 了。Arch 可以不停滚，保持最新，简直一劳永逸，特别适合向我这样的懒人。而且可以做到里面所有的软件都是我的选择。后来换了电脑，人越来越懒了，精神洁癖也没有了，就装了 Manjaro。可以滚，可以新，享用充分测试后的软件，不容易挂，我甚至开始觉得历史要终结了。其实此前也用过 Lubuntu、Deepin，不过时间不长，而且也没有什么能给我留下深刻的印象的特点，所以就略过不谈了。</p>

<p>感觉有点偏题……</p>

<p>如果说体验的话，除却那些系统本身带来的轻松愉快的感觉之外，令人不爽的折腾其实主要还是由软件的生态环境造成的。QQ 的故事其实很典型。QQ 一度是刚需，因为大家都用，不能不用。有人就分析了协议自己写了名为 eva 的客户端，这曾经是 Linux 上最好用的 QQ 客户端，没有之一。但是腾讯不喜欢，而且对 Linux 上客户端的开发基本无视（别提那个官方的客户端了，很好笑）。总之长久来都是不能用的，那时我总是开着虚拟机。但与此同时，wine 变得越来越好用，最终使得 wine QQ 也成为一个可选的方案了。然而如今我也不用 QQ 了。类似的还有网银的需求被支付宝替代、WPS 最终推出 Linux 版的事情。讲这些故事是为了说明具体的应用软件其实变更很快，一方面是因为新的软件被开发出来，新的解决方案被研究出来，另一方面需求同样也会发生变化，这是沧海桑田的事。因此用陈旧的印象评判现在的环境其实并不合理，有些时候只是耐心问题。当然我作为普通用户持这种观点没问题，行业一线的朋友可能就需要多一些担当了。这几年的经验倒是训练了我敏锐的判断，即什么事是可行的，什么现在还不行，什么新项目很有前途，可进可退才是明智之举。</p>

<p>谈哪些软件好用可能没什么意思，最后总结一下经验教训吧。</p>

<ol>
<li>精简系统和软件配置</li>
<li>不要做完全不理解的事</li>
<li>备份重要文件，工作环境和玩具环境分开，区分保守和激进两种策略</li>
<li>提前了解麻烦的事和不可能的事 （例如买机器时避免奇怪的硬件）</li>
<li><strong>关心真正要做的事</strong> （工作时别折腾，珍惜时间）</li>
<li><em>装个 Windows 10 救急用 （我好坏啊 捂脸）</em></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[German Keyboard Layout Optimized for Simplified Chinese Keyboard]]></title>
    <link href="https://elephantus.moe/blog/german-keyboard-layout-optimized-for-simplified-chinese-keyboard/"/>
    <updated>2016-09-18T12:39:47+08:00</updated>
    <id>https://elephantus.moe/blog/german-keyboard-layout-optimized-for-simplified-chinese-keyboard</id>
    <content type="html"><![CDATA[<p>GitHub Project: <a href="https://github.com/fluviusmagnus/DeT3Zh">DeT3Zh</a></p>

<h2>Why?</h2>

<p>Typical Chinese keyboards lack the <code>&lt;</code> key between LShift and Y, which appears commonly on European keyboards. As a result, Germanists in China have to keep switching frequently from one keyboard layout to another. Therefore, I tried to create a special modified German keyboard layout for those who are using a Chinese keyboard. All the modification works fine on my Manjaro machine, and should work also on Archlinux or other Linux systems. <!--more--></p>

<h2>What has been changed?</h2>

<p>This customized keyboard layout is modified on the basis of T3 (Tastaturbelegung 3, „Expertentastatur“), which is the most powerful and also compatible with T1 and T2. For more information about German keyboard please see <a href="https://de.wikipedia.org/wiki/Tastaturbelegung#Deutschland_und_.C3.96sterreich">Tastaturbelegung</a> on Wikipedia or <a href="http://www.pentzlin.com/ErweiterungDeutscheTastatur2.pdf">Karl Pentzlin: Vorschlag zur Erweiterung der deutschen PC-Standardtastatur (PDF; 1,2 MB)</a>. There are also illustrations showing the position of each key in both links.</p>

<p>My modification is simple. Group 1 i.e. <code>&lt; &gt; |</code> on the <code>&lt;</code> key is moved to Group 2 of key <code>ß</code>, and Group 2 i.e. <code>ŉ ¦ ♪</code> on it is moved to Group 2 of key <code>+</code>. This should be safe because the overwritten groups are actually duplicate.</p>

<h2>How to use?</h2>

<p>For Manjaro or Archlinux, place the layout file <code>de_zhkb</code> into <code>/usr/share/X11/xkb/symbols/</code>. And then modify <code>base.lst</code>, <code>evdev.lst</code> and <code>evdev.xml</code> in <code>/usr/share/X11/xkb/rules/</code>. This won&rsquo;t be difficult as these files are quite self-explanatory. After a reboot the German (T3 Modified for ZhKB) layout should appear on the list of a selector.</p>

<p><strong>Honestly speaking, I do not know very well how to deal with these files. So please tell me if there is anything wrong.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[备份 VPS 至 Dropbox]]></title>
    <link href="https://elephantus.moe/blog/backup-vps-to-dropbox/"/>
    <updated>2016-04-19T13:54:57+08:00</updated>
    <id>https://elephantus.moe/blog/backup-vps-to-dropbox</id>
    <content type="html"><![CDATA[<p>偶然想起自己的机器曾经丢失过数据，而那次仅仅是因为没有做一些基本的备份，可见备份数据确实是必须的。主机商已经提供了基本的快照的方法，虽然暂时不对这些备份收费，但每次都备份整台机器数据量未免过于庞大。此外，我还希望自己能够灵活查看备份里的内容，储存在某个私有的云空间里是再合适不过了。由于机器本身在国外，爬梯对我而言还算轻松，使用有着良好技术支持的 Dropbox 是再合适不过了。（喜感）<!--more--></p>

<p>我的基本想法是，写一个 bash 脚本，用 cron 定时运行它。在脚本中使用 tar 打包需要备份的文件，然后用一个特别方便的第三方小程序 <a href="https://github.com/andreafabrizi/Dropbox-Uploader/">Dropbox-Uploader</a> 把备份推上去即可。使用这个脚本需要在 Dropbox 创建一个 App 取得相应的 Key，具体可以看上述项目的说明和 Dropbox 的官方文档。如果你还没有 Dropbox 的账户，你可以点击 <a href="https://db.tt/ok8FuQ3e">这个链接</a> 来注册，从这个渠道你和我都可以免费获得额外的 500MB 储存空间。</p>

<p>以下是我脚本的内容，仅供参考，具体的文件夹肯定是要你自己调整的。</p>

<pre><code class="bash">bak_dir="/home/yourname/backup"
bak_time=`date +%F-%H%M%S`
tar -zcvf $bak_dir/home-$bak_time.tar.gz -X /home/yourname/backup_exclude_list /home
/home/yourname/dropbox_uploader.sh upload $bak_dir/* /
rm $bak_dir/*
</code></pre>

<p>有几个点需要注意。所谓 <code>bak_dir</code> 是一个专用的文件夹，每次用来备份后都会清空。<code>dropbox_uploader.sh</code> 是从前述项目中获取的，使用前需要单独运行一次，以做好设置。<code>backup_exclude_list</code> 是一个纯文本文件，其中每行为一个需要排除在压缩包外的文件的路径，之所以单独做一个列表是为了便于分开管理。在实际运行前最好先测试一下做出来的压缩包会不会太大，如果有大而不必要的东西最好事先排除，免得浪费空间和流量。</p>

<p>最后祝您，服务器平安，再见！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[出于某些原因移动了站点]]></title>
    <link href="https://elephantus.moe/blog/moved-the-site-to-somewhere-else/"/>
    <updated>2016-03-10T19:53:02+08:00</updated>
    <id>https://elephantus.moe/blog/moved-the-site-to-somewhere-else</id>
    <content type="html"><![CDATA[<p>之前提到过，作为静态页面的本站是由 GitHub Pages 提供托管服务的。这样做的好处很明显，可以节省自己维护的成本，但劣势也同样存在。</p>

<p>今天偶然发现，百度无论如何都无法收录我的新版站点，经调查，乃是 GitHub 阻止百度爬虫之故。为了避免访问量的损失，以及获得自己个性化配置站点功能的条件，我决定把网站放到自己一台独立的机器上。虽然会加速消耗一定的流量，但好在基本都是静态页面，而且有 CDN 的帮助，应该能减少相当一部分负担。此外，由于换了 DNS 服务，原来的提供的奇怪 SSL 干脆放弃，直接申请一个独立的安在服务器上，目前感觉还不错。<!--more--></p>

<p>自然，我们要使用优雅的方式（虽然还是很蠢），Github Webhooks 的功能得以使用。除了 Github 的一个奇怪之处（或许以后有机会再介绍），基本上整个流程写下来还是顺利的。唯独困扰我许久的问题竟然是一个权限问题，暂且在此记录下来。</p>

<p>我喜欢 Python，所以用它来写 CGI，中间打算调用一下 <code>git pull</code>，然而每次都报错。通过 <code>os.system()</code> 得到的退出码是 256。一般情况，退出码的范围是 0~255，这个 256 就很奇怪，后来发现这是由 Python 特别转换过得到的，对应的实际退出码是 1。这样便明确了错误原因是没有权限。我们（我当时不）知道，网页服务器的权限是很低的，所以要把相应要处理的文件的组设置为 <code>www-data</code> 并给足权限才可以使用。</p>
]]></content>
  </entry>
  
</feed>
